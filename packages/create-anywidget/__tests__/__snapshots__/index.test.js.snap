// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`create-anywidget (Bun) > template-react 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.jsx --minify --format=esm --bundle --outdir=src/undefined/static\\"
	},
	\\"dependencies\\": {
		\\"@anywidget/react\\": \\"0.0.2\\",
		\\"react\\": \\"^18.2.0\\",
		\\"react-dom\\": \\"^18.2.0\\"
	},
	\\"devDependencies\\": {
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import * as React from \\"react\\";
import { createRender, useModelState } from \\"@anywidget/react\\";
import \\"./widget.css\\";

export const render = createRender(() => {
	const [value, setValue] = useModelState(\\"value\\");
	return (
		<button
			className=\\"undefined-counter-button\\"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});
",
    "path": "js/widget.jsx",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-react-ts 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.tsx --minify --format=esm --bundle --outdir=src/undefined/static\\",
		\\"typecheck\\": \\"tsc --noEmit\\"
	},
	\\"dependencies\\": {
		\\"@anywidget/react\\": \\"0.0.2\\",
		\\"react\\": \\"^18.2.0\\",
		\\"react-dom\\": \\"^18.2.0\\"
	},
	\\"devDependencies\\": {
		\\"@types/react\\": \\"^18.2.29\\",
		\\"@types/react-dom\\": \\"^18.2.14\\",
		\\"typescript\\": \\"^5.2.2\\",
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import * as React from \\"react\\";
import { createRender, useModelState } from \\"@anywidget/react\\";
import \\"./widget.css\\";

export const render = createRender(() => {
	const [value, setValue] = useModelState<number>(\\"value\\");
	return (
		<button
			className=\\"undefined-counter-button\\"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});
",
    "path": "js/widget.tsx",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	\\"include\\": [
		\\"js\\"
	],
	\\"compilerOptions\\": {
		\\"target\\": \\"ES2020\\",
		\\"module\\": \\"ESNext\\",
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		],
		\\"skipLibCheck\\": true,
		\\"moduleResolution\\": \\"bundler\\",
		\\"allowImportingTsExtensions\\": true,
		\\"resolveJsonModule\\": true,
		\\"isolatedModules\\": true,
		\\"noEmit\\": true,
		\\"jsx\\": \\"react\\",
		\\"strict\\": true,
		\\"noUnusedLocals\\": true,
		\\"noUnusedParameters\\": true,
		\\"noFallthroughCasesInSwitch\\": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.js --minify --format=esm --bundle --outdir=src/undefined/static\\"
	},
	\\"dependencies\\": {},
	\\"devDependencies\\": {
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import \\"./widget.css\\";

export function render({ model, el }) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "js/widget.js",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla-deno-jsdoc 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]
",
    "path": "pyproject.toml",
  },
  {
    "content": "{
	\\"lock\\": false,
	\\"compilerOptions\\": {
		\\"checkJs\\": true,
		\\"allowJs\\": true,
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		]
	},
	\\"fmt\\": {
		\\"useTabs\\": true
	},
	\\"lint\\": {
		\\"rules\\": {
			\\"exclude\\": [
				\\"prefer-const\\"
			]
		}
	}
}",
    "path": "deno.json",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints


",
    "path": ".gitignore",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import confetti from \\"https://esm.sh/canvas-confetti@1\\";

/** @typedef {{ value: number }} Model */

/** @type {import(\\"npm:@anywidget/types\\").Render<Model>} */
export function render({ model, el }) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		confetti();
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "src/undefined/static/widget.js",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "src/undefined/static/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla-ts 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.ts --minify --format=esm --bundle --outdir=src/undefined/static\\",
		\\"typecheck\\": \\"tsc --noEmit\\"
	},
	\\"dependencies\\": {},
	\\"devDependencies\\": {
		\\"@anywidget/types\\": \\"0.1.4\\",
		\\"typescript\\": \\"^5.2.2\\",
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import type { RenderContext } from \\"@anywidget/types\\";
import \\"./widget.css\\";

/* Specifies attributes defined with traitlets in ../src/undefined/__init__.py */
interface WidgetModel {
	value: number;
	/* Add your own */
}

export function render({ model, el }: RenderContext<WidgetModel>) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "js/widget.ts",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	\\"include\\": [
		\\"js\\"
	],
	\\"compilerOptions\\": {
		\\"target\\": \\"ES2020\\",
		\\"module\\": \\"ESNext\\",
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		],
		\\"skipLibCheck\\": true,
		\\"moduleResolution\\": \\"bundler\\",
		\\"allowImportingTsExtensions\\": true,
		\\"resolveJsonModule\\": true,
		\\"isolatedModules\\": true,
		\\"noEmit\\": true,
		\\"jsx\\": \\"react\\",
		\\"strict\\": true,
		\\"noUnusedLocals\\": true,
		\\"noUnusedParameters\\": true,
		\\"noFallthroughCasesInSwitch\\": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget > template-react 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.jsx --minify --format=esm --bundle --outdir=src/undefined/static\\"
	},
	\\"dependencies\\": {
		\\"@anywidget/react\\": \\"0.0.2\\",
		\\"react\\": \\"^18.2.0\\",
		\\"react-dom\\": \\"^18.2.0\\"
	},
	\\"devDependencies\\": {
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import * as React from \\"react\\";
import { createRender, useModelState } from \\"@anywidget/react\\";
import \\"./widget.css\\";

export const render = createRender(() => {
	const [value, setValue] = useModelState(\\"value\\");
	return (
		<button
			className=\\"undefined-counter-button\\"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});
",
    "path": "js/widget.jsx",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget > template-react-ts 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.tsx --minify --format=esm --bundle --outdir=src/undefined/static\\",
		\\"typecheck\\": \\"tsc --noEmit\\"
	},
	\\"dependencies\\": {
		\\"@anywidget/react\\": \\"0.0.2\\",
		\\"react\\": \\"^18.2.0\\",
		\\"react-dom\\": \\"^18.2.0\\"
	},
	\\"devDependencies\\": {
		\\"@types/react\\": \\"^18.2.29\\",
		\\"@types/react-dom\\": \\"^18.2.14\\",
		\\"typescript\\": \\"^5.2.2\\",
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import * as React from \\"react\\";
import { createRender, useModelState } from \\"@anywidget/react\\";
import \\"./widget.css\\";

export const render = createRender(() => {
	const [value, setValue] = useModelState<number>(\\"value\\");
	return (
		<button
			className=\\"undefined-counter-button\\"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});
",
    "path": "js/widget.tsx",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	\\"include\\": [
		\\"js\\"
	],
	\\"compilerOptions\\": {
		\\"target\\": \\"ES2020\\",
		\\"module\\": \\"ESNext\\",
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		],
		\\"skipLibCheck\\": true,
		\\"moduleResolution\\": \\"bundler\\",
		\\"allowImportingTsExtensions\\": true,
		\\"resolveJsonModule\\": true,
		\\"isolatedModules\\": true,
		\\"noEmit\\": true,
		\\"jsx\\": \\"react\\",
		\\"strict\\": true,
		\\"noUnusedLocals\\": true,
		\\"noUnusedParameters\\": true,
		\\"noFallthroughCasesInSwitch\\": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget > template-vanilla 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.js --minify --format=esm --bundle --outdir=src/undefined/static\\"
	},
	\\"dependencies\\": {},
	\\"devDependencies\\": {
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import \\"./widget.css\\";

export function render({ model, el }) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "js/widget.js",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget > template-vanilla-deno-jsdoc 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]
",
    "path": "pyproject.toml",
  },
  {
    "content": "{
	\\"lock\\": false,
	\\"compilerOptions\\": {
		\\"checkJs\\": true,
		\\"allowJs\\": true,
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		]
	},
	\\"fmt\\": {
		\\"useTabs\\": true
	},
	\\"lint\\": {
		\\"rules\\": {
			\\"exclude\\": [
				\\"prefer-const\\"
			]
		}
	}
}",
    "path": "deno.json",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints


",
    "path": ".gitignore",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import confetti from \\"https://esm.sh/canvas-confetti@1\\";

/** @typedef {{ value: number }} Model */

/** @type {import(\\"npm:@anywidget/types\\").Render<Model>} */
export function render({ model, el }) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		confetti();
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "src/undefined/static/widget.js",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "src/undefined/static/widget.css",
  },
]
`;

exports[`create-anywidget > template-vanilla-ts 1`] = `
[
  {
    "content": "# undefined

\`\`\`sh
pip install undefined
\`\`\`
",
    "path": "README.md",
  },
  {
    "content": "node_modules
.venv
dist

# Python
__pycache__
.ipynb_checkpoints

src/undefined/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	\\"scripts\\": {
		\\"dev\\": \\"npm run build -- --sourcemap=inline --watch\\",
		\\"build\\": \\"esbuild js/widget.ts --minify --format=esm --bundle --outdir=src/undefined/static\\",
		\\"typecheck\\": \\"tsc --noEmit\\"
	},
	\\"dependencies\\": {},
	\\"devDependencies\\": {
		\\"@anywidget/types\\": \\"0.1.4\\",
		\\"typescript\\": \\"^5.2.2\\",
		\\"esbuild\\": \\"^0.19.5\\"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = [\\"hatchling\\"]
build-backend = \\"hatchling.build\\"

[project]
name = \\"undefined\\"
version = \\"0.0.0\\"
dependencies = [\\"anywidget\\"]

[project.optional-dependencies]
dev = [\\"watchfiles\\", \\"jupyterlab\\"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = [\\"dev\\"]


[tool.hatch.build]
only-packages = true
artifacts = [\\"src/undefined/static/*\\"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = \\"hatch_jupyter_builder.npm_builder\\"
ensured-targets = [\\"src/undefined/static/widget.js\\"]
skip-if-exists = [\\"src/undefined/static/widget.js\\"]
dependencies = [\\"hatch-jupyter-builder>=0.5.0\\"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = \\"undefined\\"
build_cmd = \\"build\\"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version(\\"undefined\\")
except importlib.metadata.PackageNotFoundError:
    __version__ = \\"unknown\\"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.js\\"
    _css = pathlib.Path(__file__).parent / \\"static\\" / \\"widget.css\\"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/undefined/__init__.py",
  },
  {
    "content": "import type { RenderContext } from \\"@anywidget/types\\";
import \\"./widget.css\\";

/* Specifies attributes defined with traitlets in ../src/undefined/__init__.py */
interface WidgetModel {
	value: number;
	/* Add your own */
}

export function render({ model, el }: RenderContext<WidgetModel>) {
	let btn = document.createElement(\\"button\\");
	btn.classList.add(\\"undefined-counter-button\\");
	btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	btn.addEventListener(\\"click\\", () => {
		model.set(\\"value\\", model.get(\\"value\\") + 1);
		model.save_changes();
	});
	model.on(\\"change:value\\", () => {
		btn.innerHTML = \`count is \${model.get(\\"value\\")}\`;
	});
	el.appendChild(btn);
}
",
    "path": "js/widget.ts",
  },
  {
    "content": ".undefined-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: \\"Roboto\\", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.undefined-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	\\"include\\": [
		\\"js\\"
	],
	\\"compilerOptions\\": {
		\\"target\\": \\"ES2020\\",
		\\"module\\": \\"ESNext\\",
		\\"lib\\": [
			\\"ES2020\\",
			\\"DOM\\",
			\\"DOM.Iterable\\"
		],
		\\"skipLibCheck\\": true,
		\\"moduleResolution\\": \\"bundler\\",
		\\"allowImportingTsExtensions\\": true,
		\\"resolveJsonModule\\": true,
		\\"isolatedModules\\": true,
		\\"noEmit\\": true,
		\\"jsx\\": \\"react\\",
		\\"strict\\": true,
		\\"noUnusedLocals\\": true,
		\\"noUnusedParameters\\": true,
		\\"noFallthroughCasesInSwitch\\": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;
