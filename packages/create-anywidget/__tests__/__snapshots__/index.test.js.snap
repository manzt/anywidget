// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`create-anywidget (Bun) > template-react 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "bun build js/widget.jsx --minify --format=esm --outdir=src/ipyfoo/static --asset-naming=[name].[ext]"
	},
	"dependencies": {
		"@anywidget/react": "0.0.7",
		"react": "^18.2.0",
		"react-dom": "^18.2.0"
	},
	"devDependencies": {}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "bun"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import * as React from "react";
import { createRender, useModelState } from "@anywidget/react";
import "./widget.css";

const render = createRender(() => {
	const [value, setValue] = useModelState("value");
	return (
		<button
			className="ipyfoo-counter-button"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});

export default { render };
",
    "path": "js/widget.jsx",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-react-ts 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "bun build js/widget.tsx --minify --format=esm --outdir=src/ipyfoo/static --asset-naming=[name].[ext]",
		"typecheck": "tsc --noEmit"
	},
	"dependencies": {
		"@anywidget/react": "0.0.7",
		"react": "^18.2.0",
		"react-dom": "^18.2.0"
	},
	"devDependencies": {
		"@types/react": "^18.2.61",
		"@types/react-dom": "^18.2.19",
		"typescript": "^5.3.3"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "bun"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import * as React from "react";
import { createRender, useModelState } from "@anywidget/react";
import "./widget.css";

const render = createRender(() => {
	const [value, setValue] = useModelState<number>("value");
	return (
		<button
			className="ipyfoo-counter-button"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});

export default { render };
",
    "path": "js/widget.tsx",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	"include": [
		"js"
	],
	"compilerOptions": {
		"target": "ES2020",
		"module": "ESNext",
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		],
		"skipLibCheck": true,
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react",
		"strict": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "bun build js/widget.js --minify --format=esm --outdir=src/ipyfoo/static --asset-naming=[name].[ext]"
	},
	"dependencies": {},
	"devDependencies": {}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "bun"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import "./widget.css";

function render({ model, el }) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "js/widget.js",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla-deno-jsdoc 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`src/ipyfoo/static/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]
",
    "path": "pyproject.toml",
  },
  {
    "content": "{
	"lock": false,
	"compilerOptions": {
		"checkJs": true,
		"allowJs": true,
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		]
	},
	"fmt": {
		"exclude": [
			".venv"
		]
	},
	"lint": {
		"exclude": [
			".venv"
		]
	}
}",
    "path": "deno.json",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints


",
    "path": ".gitignore",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import confetti from "https://esm.sh/canvas-confetti@1";

/** @typedef {{ value: number }} Model */

/** @type {import("npm:@anywidget/types").Render<Model>} */
function render({ model, el }) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		confetti();
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "src/ipyfoo/static/widget.js",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "src/ipyfoo/static/widget.css",
  },
]
`;

exports[`create-anywidget (Bun) > template-vanilla-ts 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "bun build js/widget.ts --minify --format=esm --outdir=src/ipyfoo/static --asset-naming=[name].[ext]",
		"typecheck": "tsc --noEmit"
	},
	"dependencies": {},
	"devDependencies": {
		"@anywidget/types": "0.1.9",
		"typescript": "^5.3.3"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "bun"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import type { RenderContext } from "@anywidget/types";
import "./widget.css";

/* Specifies attributes defined with traitlets in ../src/ipyfoo/__init__.py */
interface WidgetModel {
	value: number;
	/* Add your own */
}

function render({ model, el }: RenderContext<WidgetModel>) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "js/widget.ts",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	"include": [
		"js"
	],
	"compilerOptions": {
		"target": "ES2020",
		"module": "ESNext",
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		],
		"skipLibCheck": true,
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react",
		"strict": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget > template-react 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "esbuild js/widget.jsx --minify --format=esm --bundle --outdir=src/ipyfoo/static"
	},
	"dependencies": {
		"@anywidget/react": "0.0.7",
		"react": "^18.2.0",
		"react-dom": "^18.2.0"
	},
	"devDependencies": {
		"esbuild": "^0.20.0"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import * as React from "react";
import { createRender, useModelState } from "@anywidget/react";
import "./widget.css";

const render = createRender(() => {
	const [value, setValue] = useModelState("value");
	return (
		<button
			className="ipyfoo-counter-button"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});

export default { render };
",
    "path": "js/widget.jsx",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget > template-react-ts 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "esbuild js/widget.tsx --minify --format=esm --bundle --outdir=src/ipyfoo/static",
		"typecheck": "tsc --noEmit"
	},
	"dependencies": {
		"@anywidget/react": "0.0.7",
		"react": "^18.2.0",
		"react-dom": "^18.2.0"
	},
	"devDependencies": {
		"@types/react": "^18.2.61",
		"@types/react-dom": "^18.2.19",
		"typescript": "^5.3.3",
		"esbuild": "^0.20.0"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import * as React from "react";
import { createRender, useModelState } from "@anywidget/react";
import "./widget.css";

const render = createRender(() => {
	const [value, setValue] = useModelState<number>("value");
	return (
		<button
			className="ipyfoo-counter-button"
			onClick={() => setValue(value + 1)}
		>
			count is {value}
		</button>
	);
});

export default { render };
",
    "path": "js/widget.tsx",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	"include": [
		"js"
	],
	"compilerOptions": {
		"target": "ES2020",
		"module": "ESNext",
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		],
		"skipLibCheck": true,
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react",
		"strict": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;

exports[`create-anywidget > template-vanilla 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "esbuild js/widget.js --minify --format=esm --bundle --outdir=src/ipyfoo/static"
	},
	"dependencies": {},
	"devDependencies": {
		"esbuild": "^0.20.0"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import "./widget.css";

function render({ model, el }) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "js/widget.js",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
]
`;

exports[`create-anywidget > template-vanilla-deno-jsdoc 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`src/ipyfoo/static/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]
",
    "path": "pyproject.toml",
  },
  {
    "content": "{
	"lock": false,
	"compilerOptions": {
		"checkJs": true,
		"allowJs": true,
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		]
	},
	"fmt": {
		"exclude": [
			".venv"
		]
	},
	"lint": {
		"exclude": [
			".venv"
		]
	}
}",
    "path": "deno.json",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints


",
    "path": ".gitignore",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import confetti from "https://esm.sh/canvas-confetti@1";

/** @typedef {{ value: number }} Model */

/** @type {import("npm:@anywidget/types").Render<Model>} */
function render({ model, el }) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		confetti();
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "src/ipyfoo/static/widget.js",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "src/ipyfoo/static/widget.css",
  },
]
`;

exports[`create-anywidget > template-vanilla-ts 1`] = `
[
  {
    "content": "# ipyfoo

## Installation

\`\`\`sh
pip install ipyfoo
\`\`\`

## Development installation

Create a virtual environment and and install ipyfoo in *editable* mode with the
optional development dependencies:

\`\`\`sh
python -m venv .venv
source .venv/bin/activate
pip install -e ".[dev]"
\`\`\`

You then need to install the JavaScript dependencies and run the development server.

\`\`\`sh
npm install
npm run dev
\`\`\`

Open \`example.ipynb\` in JupyterLab, VS Code, or your favorite editor
to start developing. Changes made in \`js/\` will be reflected
in the notebook.
",
    "path": "README.md",
  },
  {
    "content": "{
	"cells": [
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"%load_ext autoreload\\n",
				"%autoreload 2\\n",
				"%env ANYWIDGET_HMR=1"
			]
		},
		{
			"cell_type": "code",
			"execution_count": null,
			"metadata": {},
			"outputs": [],
			"source": [
				"from ipyfoo import Counter\\n",
				"Counter()"
			]
		}
	],
	"metadata": {
		"language_info": {
			"name": "python"
		}
	},
	"nbformat": 4,
	"nbformat_minor": 2
}",
    "path": "example.ipynb",
  },
  {
    "content": "node_modules
.venv
dist
.DS_Store

# Python
__pycache__
.ipynb_checkpoints

src/ipyfoo/static
",
    "path": ".gitignore",
  },
  {
    "content": "{
	"scripts": {
		"dev": "npm run build -- --sourcemap=inline --watch",
		"build": "esbuild js/widget.ts --minify --format=esm --bundle --outdir=src/ipyfoo/static",
		"typecheck": "tsc --noEmit"
	},
	"dependencies": {},
	"devDependencies": {
		"@anywidget/types": "0.1.9",
		"typescript": "^5.3.3",
		"esbuild": "^0.20.0"
	}
}",
    "path": "package.json",
  },
  {
    "content": "[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipyfoo"
version = "0.0.0"
dependencies = ["anywidget"]
readme = "README.md"

[project.optional-dependencies]
dev = ["watchfiles", "jupyterlab"]

# automatically add the dev feature to the default env (e.g., hatch shell)
[tool.hatch.envs.default]
features = ["dev"]


[tool.hatch.build]
only-packages = true
artifacts = ["src/ipyfoo/static/*"]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["src/ipyfoo/static/widget.js"]
skip-if-exists = ["src/ipyfoo/static/widget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "npm"
build_cmd = "build"
",
    "path": "pyproject.toml",
  },
  {
    "content": "import importlib.metadata
import pathlib

import anywidget
import traitlets

try:
    __version__ = importlib.metadata.version("ipyfoo")
except importlib.metadata.PackageNotFoundError:
    __version__ = "unknown"


class Counter(anywidget.AnyWidget):
    _esm = pathlib.Path(__file__).parent / "static" / "widget.js"
    _css = pathlib.Path(__file__).parent / "static" / "widget.css"
    value = traitlets.Int(0).tag(sync=True)
",
    "path": "src/ipyfoo/__init__.py",
  },
  {
    "content": "import type { RenderContext } from "@anywidget/types";
import "./widget.css";

/* Specifies attributes defined with traitlets in ../src/ipyfoo/__init__.py */
interface WidgetModel {
	value: number;
	/* Add your own */
}

function render({ model, el }: RenderContext<WidgetModel>) {
	let btn = document.createElement("button");
	btn.classList.add("ipyfoo-counter-button");
	btn.innerHTML = \`count is \${model.get("value")}\`;
	btn.addEventListener("click", () => {
		model.set("value", model.get("value") + 1);
		model.save_changes();
	});
	model.on("change:value", () => {
		btn.innerHTML = \`count is \${model.get("value")}\`;
	});
	el.appendChild(btn);
}

export default { render };
",
    "path": "js/widget.ts",
  },
  {
    "content": ".ipyfoo-counter-button {
	background: linear-gradient(
		300deg,
		#9933ff 33.26%,
		#ff6666 46.51%,
		#faca30 59.77%,
		#00cd99 73.03%,
		#00ccff 86.29%
	);
	border-radius: 10px;
	border: 0;
	color: white;
	cursor: pointer;
	font-family: "Roboto", sans-serif;
	font-size: 2em;
	margin: 10px;
	padding: 10px 20px;
	transition: transform 0.25s ease-in-out;
}

.ipyfoo-counter-button:hover {
	transform: scale(1.05);
}
",
    "path": "js/widget.css",
  },
  {
    "content": "{
	"include": [
		"js"
	],
	"compilerOptions": {
		"target": "ES2020",
		"module": "ESNext",
		"lib": [
			"ES2020",
			"DOM",
			"DOM.Iterable"
		],
		"skipLibCheck": true,
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		"jsx": "react",
		"strict": true,
		"noUnusedLocals": true,
		"noUnusedParameters": true,
		"noFallthroughCasesInSwitch": true
	}
}",
    "path": "tsconfig.json",
  },
]
`;
